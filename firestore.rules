rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data : 
        null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData() != null && getUserData().role == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserData() != null && getUserData().role in roles;
    }
    
    function isAdmin() {
      return hasRole('ADMIN');
    }
    
    function isManager() {
      return hasRole('MANAGER');
    }
    
    function isKAM() {
      return hasRole('KAM');
    }
    
    function isProcurement() {
      return hasRole('PROCUREMENT');
    }
    
    function isAudit() {
      return hasRole('AUDIT');
    }
    
    function isOwner(resourceUserId) {
      return isAuthenticated() && request.auth.uid == resourceUserId;
    }
    
    function canAccessMerchant(merchant) {
      return isAdmin() || merchant in getUserData().merchants;
    }
    
    function canAccessCurrency(currency) {
      return isAdmin() || currency in getUserData().currencies;
    }
    
    function hasPermission(module, permission) {
      let userPermissions = getUserData().permissions;
      return isAdmin() || 
             (module in userPermissions && permission in userPermissions[module]);
    }
    
    function isActive() {
      return isAuthenticated() && getUserData().isActive == true;
    }

    // Users collection
    match /users/{userId} {
      // Allow users to read their own data
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isAdmin() || 
        (isManager() && hasPermission('user-management', 'VIEW'))
      );
      
      // Allow listing users for admins and managers with user-management permissions
      // Temporarily allow all authenticated users to list users for debugging
      allow list: if isAuthenticated();
      
      // Allow authenticated users to create their own user document (first login)
      // This is needed for automatic user document creation
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.id == userId &&
                       request.resource.data.email == request.auth.token.email;
                       
      // Only admins can create/update/delete users (after user doc exists)
      allow create: if isAdmin() && hasPermission('user-management', 'ADD');
      allow update: if isAdmin() && hasPermission('user-management', 'EDIT');
      allow delete: if isAdmin() && hasPermission('user-management', 'DELETE');
      
      // Allow users to update their own profile (limited fields)
      allow update: if isOwner(userId) && 
                       isActive() &&
                       // Only allow updating specific fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['name', 'lastLogin', 'updatedAt', 'additionalData']);
    }

    // VIP Profiles collection
    match /vip_profiles/{profileId} {
      // Read access: KAM (own profiles), Manager, Admin, Audit
      allow read: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('vip-profile', 'VIEW') && 
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         resource.data.assignedKAM == request.auth.uid) ||
        (isManager() && hasPermission('vip-profile', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency)) ||
        (isAudit() && hasPermission('vip-profile', 'VIEW'))
      );
      
      // Create access: KAM, Admin
      allow create: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('vip-profile', 'ADD') &&
         canAccessMerchant(request.resource.data.merchant) &&
         canAccessCurrency(request.resource.data.currency))
      );
      
      // Update access: KAM (own profiles), Admin
      allow update: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('vip-profile', 'EDIT') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         resource.data.assignedKAM == request.auth.uid)
      );
      
      // Delete access: Admin only
      allow delete: if isAdmin() && hasPermission('vip-profile', 'DELETE');

      // VIP Notes subcollection
      match /notes/{noteId} {
        allow read: if isActive() && (
          isAdmin() ||
          (isKAM() && hasPermission('vip-profile', 'VIEW') &&
           get(/databases/$(database)/documents/vip_profiles/$(profileId)).data.assignedKAM == request.auth.uid) ||
          (isManager() && hasPermission('vip-profile', 'VIEW'))
        );
        
        allow create: if isActive() && (
          isAdmin() ||
          (isKAM() && hasPermission('vip-profile', 'EDIT') &&
           get(/databases/$(database)/documents/vip_profiles/$(profileId)).data.assignedKAM == request.auth.uid)
        );
        
        allow update: if isActive() && (
          isAdmin() ||
          (isOwner(resource.data.createdBy) && isKAM())
        );
      }
    }

    // Campaigns collection
    match /campaigns/{campaignId} {
      // Read access: KAM, Manager, Admin, Audit
      allow read: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('campaign', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         (request.auth.uid == resource.data.createdBy || 
          request.auth.uid in resource.data.assignedUsers)) ||
        (isManager() && hasPermission('campaign', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency)) ||
        (isAudit() && hasPermission('campaign', 'VIEW'))
      );
      
      // Create access: KAM, Manager, Admin
      allow create: if isActive() && (
        isAdmin() ||
        ((isKAM() || isManager()) && hasPermission('campaign', 'ADD') &&
         canAccessMerchant(request.resource.data.merchant) &&
         canAccessCurrency(request.resource.data.currency))
      );
      
      // Update access: KAM (own campaigns), Manager, Admin
      allow update: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('campaign', 'EDIT') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         (resource.data.createdBy == request.auth.uid || 
          request.auth.uid in resource.data.assignedUsers)) ||
        (isManager() && hasPermission('campaign', 'EDIT') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency))
      );
      
      // Delete access: Admin, Manager, KAM (own campaigns)
      allow delete: if isActive() && (
        isAdmin() ||
        (isManager() && hasPermission('campaign', 'DELETE')) ||
        (isKAM() && hasPermission('campaign', 'DELETE') && 
         resource.data.createdBy == request.auth.uid)
      );
    }

    // Gift Requests collection
    match /gift_requests/{requestId} {
      // Read access: KAM (own requests), Manager, Procurement, Admin, Audit
      allow read: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('gift-approval', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         resource.data.requestedBy == request.auth.uid) ||
        (isManager() && hasPermission('gift-approval', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency)) ||
        (isProcurement() && hasPermission('gift-approval', 'VIEW') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency)) ||
        (isAudit() && hasPermission('gift-approval', 'VIEW'))
      );
      
      // Create access: KAM, Admin
      allow create: if isActive() && (
        isAdmin() ||
        (isKAM() && hasPermission('gift-approval', 'ADD') &&
         canAccessMerchant(request.resource.data.merchant) &&
         canAccessCurrency(request.resource.data.currency))
      );
      
      // Update access: Manager (approval), Procurement (status), Admin
      allow update: if isActive() && (
        isAdmin() ||
        (isManager() && hasPermission('gift-approval', 'EDIT') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         // Only allow approval-related fields for managers
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'approvedBy', 'approvedAt', 'rejectedBy', 'rejectedAt', 
                    'rejectionReason', 'approvalWorkflow', 'updatedAt', 'updatedBy'])) ||
        (isProcurement() && hasPermission('gift-approval', 'EDIT') &&
         canAccessMerchant(resource.data.merchant) &&
         canAccessCurrency(resource.data.currency) &&
         // Only allow procurement-related fields
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['procurementStatus', 'procurementNotes', 'deliveryDate', 
                    'updatedAt', 'updatedBy'])) ||
        (isKAM() && hasPermission('gift-approval', 'EDIT') &&
         resource.data.requestedBy == request.auth.uid &&
         resource.data.status == 'Pending' &&
         // Only allow limited fields for KAM on their own pending requests
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['reason', 'description', 'amount', 'updatedAt', 'updatedBy']))
      );
      
      // Delete access: Admin only
      allow delete: if isAdmin() && hasPermission('gift-approval', 'DELETE');
    }

    // Activity Logs collection
    match /activity_logs/{logId} {
      // Read access: Admin, Audit, own logs
      allow read: if isActive() && (
        isAdmin() ||
        isAudit() ||
        resource.data.userId == request.auth.uid
      );
      
      // Create access: System only (handled by server-side functions)
      allow create: if false;
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // System Settings collection
    match /system_settings/{settingId} {
      // Read access: Admin only
      allow read: if isAdmin();
      
      // Write access: Admin only
      allow create, update, delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Read access: Admin, own notifications
      allow read: if isActive() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );
      
      // Create access: System only
      allow create: if isAdmin();
      
      // Update access: Owner (mark as read), Admin
      allow update: if isActive() && (
        isAdmin() ||
        (resource.data.userId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['isRead', 'readAt', 'updatedAt']))
      );
      
      // Delete access: Admin, Owner
      allow delete: if isActive() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );
    }

    // Permission Matrix collection
    match /permission_matrix/{matrixId} {
      // Read access: Admin, Managers with user-management permissions
      allow read: if isActive() && (
        isAdmin() ||
        (isManager() && hasPermission('user-management', 'VIEW'))
      );
      
      // Write access: Admin only
      allow create, update, delete: if isAdmin();
    }

    // File Metadata collection
    match /file_metadata/{fileId} {
      // Read access: Admin, owner of the file, users with access to the related entity
      allow read: if isActive() && (
        isAdmin() ||
        resource.data.uploadedBy == request.auth.uid ||
        // Add specific logic based on module and entity access
        (resource.data.module == 'vip-profile' && hasPermission('vip-profile', 'VIEW')) ||
        (resource.data.module == 'campaign' && hasPermission('campaign', 'VIEW')) ||
        (resource.data.module == 'gift-approval' && hasPermission('gift-approval', 'VIEW'))
      );
      
      // Create access: Users with appropriate permissions for the module
      allow create: if isActive() && (
        isAdmin() ||
        (request.resource.data.module == 'vip-profile' && hasPermission('vip-profile', 'EDIT')) ||
        (request.resource.data.module == 'campaign' && hasPermission('campaign', 'EDIT')) ||
        (request.resource.data.module == 'gift-approval' && hasPermission('gift-approval', 'EDIT'))
      );
      
      // Update/Delete access: Admin, owner
      allow update, delete: if isActive() && (
        isAdmin() ||
        resource.data.uploadedBy == request.auth.uid
      );
    }

    // Data Jobs collection (for import/export tracking)
    match /data_jobs/{jobId} {
      // Read access: Admin, job creator
      allow read: if isActive() && (
        isAdmin() ||
        resource.data.requestedBy == request.auth.uid
      );
      
      // Create access: Users with appropriate permissions
      allow create: if isActive() && (
        isAdmin() ||
        hasPermission(request.resource.data.module, 'EXPORT') ||
        hasPermission(request.resource.data.module, 'IMPORT')
      );
      
      // Update access: System/Admin only
      allow update: if isAdmin();
      
      // Delete access: Admin, job creator (after completion)
      allow delete: if isActive() && (
        isAdmin() ||
        (resource.data.requestedBy == request.auth.uid && 
         resource.data.status in ['completed', 'failed'])
      );
    }

    // Catch-all rule: deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 